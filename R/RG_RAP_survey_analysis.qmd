---
title: "Regions Group RAP survey results"
author: "Jake Tufts"
date-modified: "`r Sys.Date()`"
format: 
  html:
    embed-resources: true
---

## Introduction

This Quarto document analyses the 2023 (early 2024) RAP Survey results for the 
Regions Group division (Data and Analysis Unit).
The areas focused on are:

- Most common/important needs in your area
- Biggest problems for people in your area when attempting RAP
- Ideas to support the people in your area with RAP


```{r}
#| label: load
#| echo: false
#| output: false

library(here)
library(ggplot2)
library(afcolours)
library(glue)
library(waffle)
library(tidytext)
library(wordcloud2)
source(here('R', 'helpers.R'))
source(here('R', 'load_data.R'))
source(here('R', 'visualisations.R'))
source(here('R', 'transform.R'))

# Subset results for RG
choose_divisions <- c("Regions Group")

# All reponses
division_data_full <- RAP_full |>
  filter_for_divisions(choose_divisions)

# Unique responses
division_data <- RAP_full |>
  filter_for_divisions(choose_divisions) |>
  filter(!duplicated(Email, fromLast = TRUE))
  
```



## Population

Here we look at the Regions Group population.

---

```{r}
#| label: waffle-plot
#| echo: false
#| column: page
#| out-width: 90%
#| fig-align: center

waffle_pop_plot(df_div = division_data_full,
                df_all = RAP_full) +
  theme(
    plot.subtitle=element_text(size=9)
  )

num_rg_resp <- nrow(division_data_full)

```


There were `r num_rg_resp` responses, of which came from 
`r length(unique(division_data$Email))` different respondents.


## Most common needs

Below is a bar chart of the survey questions which relate to why people need RAP.
The answers to the questions were a ranking from Strongly disagree to Neutral to Strongly agree.
A bi-polar Likert scale is used (Disagreement is negative, Neutral is 0 and Agreement is positive).

***This scale type is used throughout (unless the answers are counted).***

---

```{r}
#| label: needs-bar
#| echo: false
#| column: page
#| out-width: 90%
#| fig-align: center

# Convert to bi-polar Likert scale
bi_division_data_numerical <- rank_to_num(df = division_data,
                                       ranked_columns = ranked_columns,
                                       likert_scale_dictionary = bi_likert_scale_dictionary,
                                       numerical_ranking_factors = bi_numerical_ranking_factors)

# Create long version of numerical data
div_data_num_long <- rank_to_long(bi_division_data_numerical, 
                                  cols_long = ranked_columns)


# Organisation cols
org_cols <- division_data |> 
  select(1:which(names(division_data)=="Group")) |> 
  colnames()

# Convert num survey qs to long
needs_qs <- c("repetitive_tasks", "figuring_out_existing_processes_time_consuming",
                "someone_else_could_run", "re-run_old_versions", "QA_manual_checks")


# Dataframe storing rank values
sum_ranks <- data.frame(rank = ranking_factors, value = as.numeric(bi_numerical_ranking_factors))


# Bar chart
div_data_num_long |> 
  filter(questions %in% needs_qs) |> 
  summarise(total_rank = mean(as.numeric_factor(responses)),
            .by = c("questions")) |> 
  arrange(desc(total_rank)) |> 
  mutate(questions = unlist(column_names_dictionary[questions]),
         questions = factor(questions, levels = questions)) |> 
  ggplot(aes(x = questions, y = total_rank)) +
  geom_col(fill = af_blue, colour = af_blue) +
  lapply(1:nrow(sum_ranks), function(i) {
    geom_hline(aes(yintercept = sum_ranks$value[i]), color = RG_colours[i], linetype = "dashed")
  }) +
  geom_text(aes(x = Inf, y = sum_ranks$value[1], label = sum_ranks$rank[1]),
              hjust = 1.2, color = RG_colours[1], vjust = -1.5) +
    geom_text(aes(x = Inf, y = sum_ranks$value[2], label = sum_ranks$rank[2]),
              hjust = 1.4, color = RG_colours[2], vjust = -1.5) +
    geom_text(aes(x = Inf, y = sum_ranks$value[3], label = sum_ranks$rank[3]),
              hjust = 1.5, color = RG_colours[3], vjust = 1.5) +
      geom_text(aes(x = Inf, y = sum_ranks$value[4], label = sum_ranks$rank[4]),
              hjust = 1.7, color = RG_colours[4], vjust = 1.5) +
      geom_text(aes(x = Inf, y = sum_ranks$value[5], label = sum_ranks$rank[5]),
              hjust = 1.3, color = RG_colours[5], vjust = 1.5) +
  labs(title = "Reptitive tasks and manual QA checks are recurring issues\n",
       subtitle = "Bar chart showing the average rank (using a bipolar Likert scale) of the survey\nquestions relating to needs for RAP.",
       x = "Survey questions",
       y = "Average of Likert ranked survey questions") +
  scale_x_discrete(labels = function(x) insert_line_breaks(x, freq = 4)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 6.5),
    plot.subtitle=element_text(size=9)
  )



```


The need for RAP is largely for analysis that is repeated or for automating
QA processes.

It should be noted that "I am confident that someone else could run the 
majority of my teams' analytical processes from start to finish without any 
help" is a positively framed question.
So, disagreement infers a need to address the issue.

---

<br>

Below, we look at how many people use code.
This is split into non-line managers and line managers because it is
expected that line managers are less likely to use code.
Therefore, including them in the plot may inflate the number of people who
do not code.


---

```{r}
#| label: who-codes
#| column: page
#| out-width: 90%
#| fig-align: center

# RAG bar chart for question I_use_code
division_data |>
  select(ID, line_manager, I_use_code, comfortable_with_code) |>
  rank_to_long(cols_long = "I_use_code", line_manager) |> 
  ggplot(aes(x = responses, fill = responses)) +
  geom_bar(colour = "black") +
  scale_fill_manual(values = likert_colours, drop=FALSE) +
  scale_x_discrete(drop=FALSE, 
                   labels = function(x) insert_line_breaks(x, freq = 1)) +
  labs(
    title = "Most people use code, but there is room for more\n",
    subtitle = paste0("Bar chart showing count of people who responded to the",
                      ' question "I regularly\nperform analysis using code"',
                      " grouped by response.\n"),
    x = "",
    y = "Count",
    fill = "Responses"
  ) +
  facet_wrap(~ factor(line_manager,
                      levels = c(FALSE, TRUE),
                      labels = c("Non-line manager", "Line manager")),
             dir = "v") +
  theme_minimal() +
  theme(
    plot.subtitle=element_text(size=9)
  )

```


The responses are relatively polarised, with no neutral responses.
The majority of respondents agreed they use code but a fairly high number 
disagree.
In line with RAP, a goal should be to try and upskill the non-coders.


---

<br>

To analyse the code-related questions, tje data is subset to include only those 
people who agreed with the "I regularly perform analysis using code" statement.

---

```{r}
#| label: code-comfortability
#| column: page
#| out-width: 90%
#| fig-align: center

code_qs <- c("comfortable_with_code", "open_source_tools", 
            "know_how_to_open_source", "version_control_confusing")

# Multi-panel plot of bar charts to show how coders rank code qs
division_data |> 
  filter(I_use_code %in% c("Strongly agree", "Agree")) |> 
  rank_to_long(cols_long = code_qs) |> 
  mutate(questions = insert_line_breaks(unlist(column_names_dictionary[questions]))) |> 
  ggplot(aes(x = responses, fill = responses)) +
  geom_bar(colour = "black") +
  scale_fill_manual(values = likert_colours) +
  scale_x_discrete(labels = function(x) insert_line_breaks(x, freq = 1)) +
  labs(
    title = "Coders are less comfortable with version control and open sourcing\n",
    subtitle = paste0("Bar charts showing count of coders* who reponded to the",
                      " code related questions\ngrouped by response.\n"),
    caption = paste0("*coders means only those who agreed with the following statement\n",
                     ' "I regularly perform analysis using code" are included.'),
    x = "",
    y = "Count",
    fill = "Responses"
  ) +
  facet_wrap(~ factor(questions, insert_line_breaks(unlist(column_names_dictionary[code_qs])))) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 7),
    plot.subtitle=element_text(size=9)
  )

```


Coders are comfortable using code and open source tools to complete analysis.
However, are less happy with using version control and eventually open-sourcing 
their code.
This final point is a relatively advanced topic so is not a major concern.

---

## RAP specific

A lollipop plot displays the respondent's feelings towards RAP.
The Bi-polar Likert rank scale is used again and the average is calculated.
Three vertical lines are drawn on the plot to show where qualitative ranks lie 
relative to the numerical scale. 


---

```{r}
#| label: RAP
#| column: page
#| out-width: 90%
#| fig-align: center


rap_qs <- original_names[19:26]

# Lollipop plot to visualise how coders compare to non coders on RAP
div_data_num_long |> 
  mutate(responses = as.numeric_factor(responses),
         questions = unlist(column_names_dictionary[questions])) |>
  filter(questions %in% rap_qs) |> 
  summarise(avg_rank = mean(responses, na.rm = T), .by="questions") |>
  ggplot(aes(x = reorder(questions, desc(avg_rank)), y = avg_rank)) +
  geom_point() +
  geom_segment(aes(x=questions, xend=questions,
                   y=0, yend=avg_rank )) +
  geom_hline(yintercept = bi_likert_scale_dictionary[c("Agree", "Neutral", "Disagree")],
             color = RG_colours[c(4, 3, 2)], linetype = "dashed") +
  lapply(c("Agree", "Neutral", "Disagree"), function(resp) {
    geom_text(aes(label = resp, y = bi_likert_scale_dictionary[resp], x=Inf), 
              color = RG_colours[match(resp, c("Disagree", "Neutral", "Agree"))+1], vjust=1)
  }) +
  scale_y_continuous(limits = c(-1.1,1)) +
  scale_x_discrete(labels = insert_line_breaks) +
  coord_flip() +
  labs(
    title = "RAP is regarded as useful, but there lacks the\nconfidence/expertise to implement it\n",
    subtitle = paste0("Lolliplot showing the average scores for RAP related",
                      " questions\nusing a bi-polar Likert ranking scale.\n"),
    x = "",
    y = "Average score (bi-polar Likert ranking)"
  ) +  
  theme_minimal()+
  theme(
    plot.subtitle=element_text(size=9),
    axis.text.y = element_text(size = 6.5),
  )
```


People understand that RAP is useful for producing analysis and feel they are
supported by their manager to implement it.
But, there is a consensus that the skills, time and support to implement
RAP are lacking.
Also, there is a strong perception that managers are not necessarily telling
their colleagues to actively implement RAP.

---

<br>

The same data is shown but split by "Coders" and "Non-coders".
This is to compare how the different groups feel towards RAP and if
there are certain aspects that should be focused on specifically for each.

---

```{r}
#| label: RAP-split
#| column: page
#| out-width: 90%
#| fig-align: center

rap_qs_full <- names(column_names_dictionary)[which(sapply(column_names_dictionary, 
                                                           function(x) x %in% rap_qs))]

div_rap_data_num_long <- rank_to_long(bi_division_data_numerical, 
                                  cols_long = rap_qs_full,
                                  "I_use_code") |> 
  mutate(I_use_code = as.numeric_factor(I_use_code),
         I_use_code = case_when(I_use_code > 0 ~ "Coder",
                                TRUE ~ "Non-coder"))

# Lollipop plot to visualise how coders compare to non coders on RAP
div_rap_data_num_long |> 
  mutate(responses = as.numeric_factor(responses),
         questions = unlist(column_names_dictionary[questions])) |>
  filter(questions %in% rap_qs) |> 
  summarise(avg_rank = mean(responses, na.rm = T), .by=c("I_use_code", "questions")) |>
  pivot_wider(id_cols = questions, names_from = I_use_code, values_from = avg_rank) |> 
  rowwise() %>% 
  mutate(mymean = mean(c(Coder,`Non-coder`) )) |> 
  arrange(mymean) |> 
  mutate(questions=factor(questions, questions)) |> 
  ggplot() +
  geom_segment(aes(x=questions, xend=questions,
                   y=Coder, yend=`Non-coder`), color="grey") +
  geom_point(aes(x=questions, y=Coder, color="Coder"),
             size=3 ) +
  geom_point(aes(x=questions, y=`Non-coder`, color="Non-coder"),
             size=3 ) +
  geom_hline(yintercept = bi_likert_scale_dictionary[c("Agree", "Neutral", "Disagree")],
             color = RG_colours[c(4, 3, 2)], linetype = "dashed") +
  lapply(c("Agree", "Neutral", "Disagree"), function(resp) {
    geom_text(aes(label = resp, y = bi_likert_scale_dictionary[resp], x=Inf), 
              color = RG_colours[match(resp, c("Disagree", "Neutral", "Agree"))+1], vjust=1)
  }) +
  scale_y_continuous(limits = c(-1.2,1)) +
  scale_x_discrete(labels = insert_line_breaks) +
  coord_flip() +
  scale_color_manual(
    values = c("Coder" = af_colours(type = "duo")[1],
               "Non-coder" = af_colours(type = "duo")[2]),
    name = "") +
  labs(
    title = paste0("Coders and non-coders feel similar towards RAP, but\n",
                   "non-coders worry about their ability to implement it\n"),
    subtitle = paste0("Lolliplot showing the average scores for RAP related",
                      " questions\nusing a bi-polar Likert ranking scale, ",
                      "split by coders and non-coders.\n"),
    x = "",
    y = "Average score (bi-polar Likert ranking)"
  ) +  
  theme_minimal() +
  theme(
    plot.subtitle = element_text(size = 9),
    axis.text.y = element_text(size = 6.5),
    legend.position = "bottom"
  ) 
```


Both coders and non-coders agree that RAP is useful.
There is an expected difference between the two groups that coders are 
more favourable to RAP.

The differences between the two groups widen significantly when it comes to
actually implementing, using and having the support for RAP.
Again, to be expected but of concern that one group may be left behind.

---

## Line manager specific

Here we investigate how line managers specifically responded about RAP.
A lollipop plot is used again to summarise the average response rankings to the questions.


---

```{r}
#| label: line-managers
#| column: page
#| out-width: 90%
#| fig-align: center

lm_qs <- original_names[26:42]

# Lollipop plot to visualise how coders compare to non coders on RAP
bi_division_data_numerical |> 
  rank_to_long(cols_long = ranked_columns, "line_manager") |> 
  mutate(responses = as.numeric_factor(responses),
         questions = unlist(column_names_dictionary[questions])) |>
  filter(line_manager == TRUE,
         questions %in% lm_qs) |> 
  summarise(avg_rank = mean(responses, na.rm = T), .by="questions") |>
  ggplot(aes(x = reorder(questions, desc(avg_rank)), y = avg_rank)) +
  geom_point() +
  geom_segment(aes(x=questions, xend=questions,
                   y=0, yend=avg_rank )) +
  geom_hline(yintercept = rev(bi_likert_scale_dictionary),
             color = RG_colours, linetype = "dashed") +
  lapply(ranking_factors, function(resp) {
             
    geom_text(aes(label = insert_line_breaks(resp, freq = 1),
                  y = bi_likert_scale_dictionary[resp], x=Inf), 
              color = RG_colours[match(resp, ranking_factors)],
              vjust=1)
             }
    ) +
  scale_y_continuous(limits = c(-2.1,2.1)) +
  scale_x_discrete(labels = insert_line_breaks) +
  coord_flip() +
  labs(
    title = paste0("Line managers are confident in their team to implement RAP, but\n",
                   "are unsure about RAP themselves\n"),
    subtitle = paste0("Lolliplot showing the average scores for line manager RAP related",
                      "\nquestions using a bi-polar Likert ranking scale.\n"),
    x = "",
    y = "Average score (bi-polar Likert ranking)"
  ) +  
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 6.5),
    plot.subtitle = element_text(size = 9)
  )
```


Managers are very confident in their team to implement RAP and perform analysis.
However, are a lot less confident in their own knowledge of RAP, where to find
out more information, support from senior leaders and finally reviewing code.


---

## Qualitiative data

There are 5 applicable qualitative questions in the survey.
For Regions Group only 3 are suitable for analysis.
The other two have very low response rates and are summarised below:

- "If you would like to, please share who you currently go to for help with issues and questions on RAP"
  - DfE RAP channel (one response)
  
- "If you are nervous about your team implementing RAP, please explain why below:"
  - "I'm nervous about the assumption that they will be implementing it"


---

```{r}
#| label: word-freq
#| column: page
#| out-width: 90%
#| fig-align: center

# Word freq plots (cleaned for stop words)
clean_word_col(division_data, "factors_limiting_reproducibility") |> 
  word_frequency(10) +
  labs(title = "Time is the biggest factor preventing people RAP\n",
       subtitle = paste0('Word frequency plot for survey question - "What do ',
                         'you think are the biggest factors that limit how ',
                         'easy\nyour analytical process is to reproduce, ',
                         'understand, or quality assure?"\n'),
       caption = "Stop words have been removed") +
  theme_minimal() +
  theme(
    plot.subtitle=element_text(size=9)
  )

```


Key points from visual analysis:

- Time and work pressures. 
- Lack the skills and coding ability.
- Ad hoc jobs (I think this means too small a project to bother with RAP)
- Missing consistency and documentation.
- Joining of multiple datasets.


---

<br>

**Word cloud for the question:**

*What support would you need to improve your current analytical processes or*
*convert current analysis to RAP?*

```{r}
#| label: word_cloud-support
#| column: page
#| out-width: 90%
#| fig-align: center
#| include: false

# Word cloud
wordcloud2(data = clean_word_col(division_data, "support_needed"),
           shape = "circle", size = 0.7, ellipticity = 0.8,
           rotateRatio = 0)

```

![](../figures/convert_to_rap.png){width=1000 height=600 fig-align="left"}


Key points from visual analysis:

- Proof of concept/exemplar projects.
- Time and space to implement RAP on projects (agree with customer).
- Training (RAP, code).

---

<br>

**Word cloud for question:**

*What projects do you work on that you feel would benefit most from automation*
*and RAP processes?*

```{r}
#| label: word_cloud-proj_rap
#| column: page
#| out-width: 90%
#| fig-align: center
#| include: false

# Word cloud
wordcloud2(data = clean_word_col(division_data, "projects_benefit_from_RAP"),
           shape = "circle", size = 0.7, ellipticity = 0.8,
           rotateRatio = 0)

```

![](../figures/projects_for_rap.png){width=1000 height=600 fig-align="left"}


Key points from visual analysis:

- Standard documents and updating statistical records.
- Monthly/Annual data output.
- QA.


## Comparing division results

```{r}
#| label: compare-divisions-wip
#| include: false

library(ggradar)

bi_rap_full <- rank_to_num(
  df = RAP_full,
  ranked_columns = ranked_columns,
  likert_scale_dictionary = bi_likert_scale_dictionary,
  numerical_ranking_factors = bi_numerical_ranking_factors
)

bi_rap_full |> 
  select(division, all_of(needs_qs)) |> 
  mutate(across(all_of(needs_qs), ~as.numeric_factor(.))) |> 
  summarise(across(all_of(needs_qs), list(avg = mean), .names = "avg_{.col}"),
            .by = "division") |> 
  filter(grepl(paste("Regions Group", collapse = "|"), division)) |> 
  ggradar(
    grid.label.size = 13,  # Affects the grid annotations (0%, 50%, etc.)
    axis.label.size = 8.5, # Afftects the names of the variables
    group.point.size = 3,   # Simply the size of the point 
    grid.min = -2,
    grid.max = 2
  )

  
```





## Survey takeaways

- **Most common/important needs in your area**

RAP is required to minimise repetitive tasks.
In particular in those workflows that are carried out at regular time intervals
(e.g., monthly, quarterly).
This should also help people when re-running old workflows (both their own and 
their colleagues).

Our unit's QA would also benefit from RAP.
Currently a consistent and thorough QA process is missing.

Documentation through RAP will be very important. 
As well as agreeing a dependable and logical set of rules to structure all 
analytical projects.

<br>


- **Biggest problems for people in your area when attempting RAP**

The major issue is buy-in.
For the analyst this is in time.
For managers it stems from not fully understanding how RAP is implemented, 
thus not being able to provide the resources (including time) to the analysts.
Customers should also factor in the requirement of RAP.

Some analysts still need to be captured in the upskilling of code.
There are introductions to [R courses ran by the leaders of RAP (Charlotte
Foster and Jen Machin)]({{< env url_dfe_learning_support >}}){target="_blank"}. 
Email 
[statistics.development@education.gov.uk](mailto:statistics.development@education.gov.uk)
for more information.

The understanding of RAP also needs to be developed further.
Small bite-size RAP-related knowledge shares will benefit confident coders.

<br>

- **Ideas to support the people in your area with RAP**

Further knowledge shares on RAP will be helpful.
We have a channel set up for this currently (RDD Data Tools meeting), this should 
be utilised more formally.

Managers should allow time for analysts to upskill in code (there are lots of 
resources available for this - but which to use needs to be made clear).

An agreed consistent and unit-wide approach to analytical projects should be 
formalised:

- Structure of folders (Now a package for this - [dauRtemplate]({{<url_dauRtemplate>}}))
- Documentation to be included
- Minimum QA processes
- Shared packages and functions
- Consistent R version and {renv}
- Approaches to R-Shiny apps
- etc.

<br>


## Caveats

***Duplicates***

There are duplicate answers (where someone has filled out the survey twice).
Instead of keeping them, duplicated answers were removed after the person's 
first response.
This was done to avoid inflation of responses.


***Line managers***

The data includes managers who are not necessarily involved in day-to-day 
coding.
We attempt to control for this by separating them out for the "Who codes?" 
analysis.
The responses to questions relating to coding are kept only for those people 
who agreed with the question "I regularly perform analysis using code".


***Missing population***

Although we captured over half of the population a sizable proportion of people 
were missed.
There are several analysts who did not complete the survey (at least 9).
Line managers are also missing (at least 2).
The results therefore do not reflect the whole unit and it would be interesting 
to see if the findings would differ if we managed to capture more respondents.




## To do

1. Add radar chart comparing groups of questions across divisions
2. Apply new folder structure to project.
3. Tidy up functions and test them.
4. Put plots into a function.
5. Use {targets}.
